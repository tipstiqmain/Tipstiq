/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface PurchaseContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "depositUSDC"
      | "ethToUsdcRate"
      | "purchaseUSDC"
      | "usdcToken"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "UsdcPurchased"): EventFragment;

  encodeFunctionData(
    functionFragment: "depositUSDC",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ethToUsdcRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseUSDC",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "usdcToken", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "depositUSDC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ethToUsdcRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseUSDC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdcToken", data: BytesLike): Result;
}

export namespace UsdcPurchasedEvent {
  export type InputTuple = [
    buyer: AddressLike,
    ethAmount: BigNumberish,
    usdcAmount: BigNumberish
  ];
  export type OutputTuple = [
    buyer: string,
    ethAmount: bigint,
    usdcAmount: bigint
  ];
  export interface OutputObject {
    buyer: string;
    ethAmount: bigint;
    usdcAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PurchaseContract extends BaseContract {
  connect(runner?: ContractRunner | null): PurchaseContract;
  waitForDeployment(): Promise<this>;

  interface: PurchaseContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  depositUSDC: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  ethToUsdcRate: TypedContractMethod<[], [bigint], "view">;

  purchaseUSDC: TypedContractMethod<[], [void], "payable">;

  usdcToken: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "depositUSDC"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "ethToUsdcRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "purchaseUSDC"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "usdcToken"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "UsdcPurchased"
  ): TypedContractEvent<
    UsdcPurchasedEvent.InputTuple,
    UsdcPurchasedEvent.OutputTuple,
    UsdcPurchasedEvent.OutputObject
  >;

  filters: {
    "UsdcPurchased(address,uint256,uint256)": TypedContractEvent<
      UsdcPurchasedEvent.InputTuple,
      UsdcPurchasedEvent.OutputTuple,
      UsdcPurchasedEvent.OutputObject
    >;
    UsdcPurchased: TypedContractEvent<
      UsdcPurchasedEvent.InputTuple,
      UsdcPurchasedEvent.OutputTuple,
      UsdcPurchasedEvent.OutputObject
    >;
  };
}
